let zero = lam s. lam z. z in
let one = lam s. lam z. s z in
let add = lam x. lam y. lam s. lam z. y s (x s z) in 
let two = add one one in
let four = add two two in
let eight = add four four in
eight
;

let tt = lam t. lam f. t in
let ff = lam t. lam f. f in
tt x y

let tt = lam t. lam f. t in
let ff = lam t. lam f. f in
ff x y

let tt = lam t. lam f. t in
let ff = lam t. lam f. f in
let and = lam x. lam y. x y ff in
let or = lam x. lam y. x tt y in
let not = lam x. x ff tt in
and tt ff;

let tt = lam t. lam f. t in
let ff = lam t. lam f. f in
let and = lam x. lam y. x y ff in
let or = lam x. lam y. x tt y in
let not = lam x. x ff tt in
and tt tt;

let tt = lam t. lam f. t in
let ff = lam t. lam f. f in
let and = lam x. lam y. x y ff in
let or = lam x. lam y. x tt y in
let not = lam x. x ff tt in
or tt ff;

let tt = lam t. lam f. t in
let ff = lam t. lam f. f in
let and = lam x. lam y. x y ff in
let or = lam x. lam y. x tt y in
let not = lam x. x ff tt in
or ff ff;

let tt = lam t. lam f. t in
let ff = lam t. lam f. f in
let and = lam x. lam y. x y ff in
let or = lam x. lam y. x tt y in
let not = lam x. x ff tt in
not tt;


let tt = lam t. lam f. t in
let ff = lam t. lam f. f in
let pair = lam x. lam y. lam b. b x y in
let fst = lam p. p tt in 
let snd = lam p. p ff in
fst (pair x y);